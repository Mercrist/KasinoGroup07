#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ; Interrupts setup
        ORG     0xFFE8                  ; Set vector for timer interrupt 
        DC16    TIMER_ISR               ; subroutine
        
        ORG     0xFFDA                  ; Set vector for S1/S2 interrupt
        DC16    PORT1_ISR               ; subroutine
        
        ; Rest of program setup
        ORG     0FFFEh                  ; vector for RESET
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment
        ORG     0x1C00                  ; RAM starting location

; ======== Variable/array directives ========
; Each character on the screen is drawn via the indices present in the 
; following arrays. 
; ==== Letters A-Z ====
;           A     B     C     D     E     F     G     H     I     J     K     L     M     N     O     P     Q     R     S     T     U     V     W     X     Y     Z   EMPTY
CHAR_H db 0xEF, 0xF1, 0x9C, 0xF0, 0x9F, 0x8E, 0xBD, 0x6F, 0x90, 0x78, 0x0E, 0x1C, 0x6C, 0x6C, 0xFC, 0xCF, 0xFC, 0xCF, 0xB7, 0x80, 0x7C, 0x0C, 0x6C, 0x00, 0x00, 0x90, 0x00
CHAR_L db 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x22, 0x00, 0xB0, 0x82, 0x00, 0x00, 0x02, 0x02, 0x00, 0x50, 0x00, 0x28, 0x0A, 0xAA, 0xB0, 0x28, 0x00   
; Indices: 0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26

; ==== Numbers 0-9. Each number matches the indices below. ====
;                                                                     EMPTY
DIGIT_H db 0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0x80, 0xFF, 0xF7, 0x00
DIGIT_L db 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
;           0     1     2     3     4     5     6     7     8     9    10

; ==== 
; LCD characters (in memory) are offset by values. Fills characters on 
; the LCD from left to right by adding to 0x0A20. This results in the 
; memory address for the high byte. Offset by one to calculate the address 
; of the low byte.
; ====
LCD_OFFSETS db 9, 5, 3, 18, 14, 7

; ==== Program Screen Arrays ====
;        K   A  S   I   N  O  (Alphabetical characters)
TITLE db 10, 0, 18, 8, 13, 14, 0

; ======== Notes on the registers ========
; These denote the registers which should store "permanent values" for the 
; current program loop. This is done to differentiate from registers used for
; indices or iterations.  
;
; ==== Registers ==== 
; R15: Stores the starting address of the array containing the indices 
;      needed to draw a character.

ALIGN 1
init:   MOV     #SFE(CSTACK), SP        ; set up stack

UnlockGPIO:                             ; Disable de GPIO power-on default
        bic.w   #LOCKLPM5,&PM5CTL0      ; high-impedance mode to activate
                                        ; previously configured port settings

; ===== Ports/LCD/Timer setup. =====
; ===== 
; Objective: Initialize the MSP430 ports, timers, and energize the display. 
; =====
; ===== 
; Postconditions: Will reset and activate the necessary input pins. Also
;                 activates the necessary settings for the LCD and the 
;                 timers to function. 
; =====
; ===== Author: Yariel Mercado =====
; ===== Date: 11/14/22-11/15/22 =====
setupDeviceHardware:     
        ; Manage Ports
        bis.b #11111001B, &P1DIR   ; set P1.1/2 to input 
        mov.b #00000110B, &P1REN   ; activate P1.1/2 pull-up/down resistors
        bis.b #00000110B, &P1OUT   ; set P1.1/2 to pull up resistor
        bic.b #BIT0, &P1OUT        ; set P1.0 LED off 

        ; Enable LCD segments: 0-21, 26-43
        mov #0xFFFF, &LCDCPCTL0
        mov #0xFC3F, &LCDCPCTL1
        mov #0x0FFF, &LCDCPCTL2
          
        ; Initialize LCD 
        mov #0x041e, &LCDCCTL0 ; sets display with hardware specs needed
        mov #0x0208, &LCDCVCTL ; enable voltage for display
        mov #0x8000, &LCDCCPCTL ; enable clock synchronization
        mov #2, &LCDCMEMCTL ; clear LCD memory (resets screen)
        bis #1, &LCDCCTL0 ; turn the LCD on'

        ; Configure timer
        ; Period = cycles * (divider/SMCLK) 
        ; SMCLK = 1 MHz
        mov #CCIE, &TA0CCTL0 ; Enable TACCR0 interrupt
        mov #TASSEL_2+MC_1+ID_3, &TA0CTL ; SMCLK (1 MHz) & Up Mode selected
        NOP ; divider = 8       
        mov #15625, &TA0CCR0 ; Set the timer capture to 1/8 of a second 
                             ; (from formula)

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        ; Program mainloop
        call #titleScreen
        call #programEnd ; (remove later)

; ===== Title screen display subroutines. =====
; ===== 
; Objective: Displays the title screen and remains here until the user presses
;            S1.
; =====
; ===== 
; Preconditions: An array of length 7 with the indices of the characters to be 
;                drawn must be properly defined. 
; =====
; ===== Postconditions: Draws the title screen onto the LCD. =====
; ===== Author: Yariel Mercado =====
; ===== Date: 11/14/22 =====
titleScreen:
        mov #TITLE, R15
        call #displayCharacterArray
        ret

; ===== General LCD display subroutines. =====
; ===== 
; Objective: Given an array of numbers, displays the characters at 
;            those positions on the LCD. 
; =====
; ===== 
; Preconditions: R15 must be an array of size 7 containing only numerical values, 
;                in order to access the values at that index and write it
;                to the LCD's memory. The 7th index must contain a 0 or a 1.
;                A 0 on this position means we desire to draw alphabetical 
;                values while a 1 means we wish to draw numerical values. 
;                Screen should also be cleared beforehand.
; =====
; ===== 
; Postconditions: Draws the indicated numbers or characters onto the LCD.
; =====
; ===== Author: Yariel Mercado =====
; ===== Date: 11/14/22 =====
displayCharacterArray: ; sets up registers to be utilized by the subroutines
        push.w R5 ; Lookup index for the character arrays
        push.w R6 ; Iteration index for LCD memory offsets/6 array elements
        push.w R7 ; Value for current LCD memory offset (same index as R6)
        ; initialize values
        mov #0, R6
        tst.b 6(R15) ; 0 == display alphabetical values
        jeq displayAlphabeticalData
        jmp displayNumericalData

displayAlphabeticalData:
        mov.b @R15, R5 ; Store value of the index for the current letter to draw
        mov.b LCD_OFFSETS(R6), R7 ; where in LCD memory to draw (offset)
        ; draw characters
        mov.b CHAR_H(R5), 0x0A20(R7)
        mov.b CHAR_L(R5), 0x0A20+1(R7)
        inc R6
        inc R15 ; increase to next location in array
        cmp #6, R6 ; end of the array 
                   ; (ignore the 7th since we check that at the start)
        jne displayAlphabeticalData
        jmp endDrawing
        
displayNumericalData:
        mov.b @R15, R5 ; Store value of the index for the current letter to draw
        mov.b LCD_OFFSETS(R6), R7 ; where in LCD memory to draw (offset)
        ; draw characters
        mov.b DIGIT_H(R5), 0x0A20(R7)
        mov.b DIGIT_L(R5), 0x0A20+1(R7)
        inc R6
        inc R15 ; increase to next location in array
        cmp #6, R6 ; end of the array 
        jne displayNumericalData
        jmp endDrawing

endDrawing:  ; restore non-permanent modification registers (check comments)
        pop R7
        pop R6
        pop R5
        ret  

; ===== Interupt subroutines. =====
; Interrupt subroutine 1 (redocument later)
TIMER_ISR:
        nop

; Interrupt subroutine 2 (redocument later)
PORT1_ISR:
        nop

programEnd:
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        NOP
        END